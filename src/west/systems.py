from __future__ import division; __metaclass__ = type

import logging, warnings
log = logging.getLogger(__name__)

import numpy
        
class WESTSystem:
    '''A description of the system being simulated, including the dimensionality and
    data type of the progress coordinate, the number of progress coordinate entries
    expected from each segment, and the distribution of states for simulation
    initialization and recycling. To construct a simulation, the user must
    subclass WESTSystem, set several instance variables, and (optionally)
    override a few member functions to provide advanced functionality, such as
    randomized initial states or recycling targets.
    
    At a minimum, the user must subclass ``WESTSystem`` and  override  
    :method:`new_region_set` to define a bin space for the system. If desired,
    the user should also override :method:`initialize` to set the data type
    and dimensionality of progress coordinate data.
    
    :ivar pcoord_ndim:    The number of dimensions in the progress coordinate.
                          Defaults to 1 (i.e. a one-dimensional progress 
                          coordinate).
    :ivar pcoord_dtype:   The data type of the progress coordinate, which must be
                          callable (e.g. ``numpy.float32`` and ``long`` will work,
                          but ``'<f4'`` and ``'<i8'`` will not).  Defaults to
                          ``numpy.float64``.
    :ivar pcoord_len:     The length of the progress coordinate time series
                          generated by each segment, including *both* the initial
                          and final values.  Defaults to 2 (i.e. only the initial
                          and final progress coordinate values for a segment are
                          returned from propagation).
    '''
    
    def __init__(self):
        # Number of dimentions in progress coordinate data
        self.pcoord_ndim = 1
        
        # Length of progress coordinate data for each segment
        self.pcoord_len = 2
        
        # Data type of progress coordinate
        self.pcoord_dtype = numpy.float64
        
    @property
    def region_set(self):
        raise DeprecationWarning('WESTSystem.region_set has been removed')
    
    @region_set.setter
    def region_set(self, rset):
        raise DeprecationWarning('WESTSystem.region_set has been removed')
        
    def initialize(self):
        '''Prepare this system object for use in simulation or analysis,
        creating a bin space, setting initial and target states, replicas per bin, 
        and so on. Called whenever a WEST tool creates an instance of the system
        driver. 
        '''
        pass
    
    def new_region_set(self):
        '''Construct and return an empty RegionSet for the bin topology for this system.
        This function must be overridden by the user in his/her system class.'''
        raise NotImplementedError
    
    # NOTE:  These hooks are not really well-integrated yet.
    def initialize_sim(self):
        '''Prepare this system for use in a newly-created simulation. Called by w_init.
        Useful for creating files, writing stuff to HDF5, etc.'''
        pass
    
    def prepare_run(self):
        '''Prepare this system for use in a simulation run. Called by w_run in
        all worker processes.'''
        pass
    
    def finalize_run(self):
        '''A hook for system-specific processing for the end of a simulation run
        (as defined by such things as maximum wallclock time, rather than perhaps
        more scientifically-significant definitions of "the end of a simulation run")'''
        pass

    def new_pcoord_array(self):
        '''Return an appropriately-sized and -typed pcoord array for a segment.
        Used by the sim manager to and data manager to create new segments.'''
        return numpy.zeros((self.pcoord_len, self.pcoord_ndim), self.pcoord_dtype)
    
    def new_pcoord_value(self, value=None):
        '''Return an appropriately-sized and -typed array representing a progress coordinate
        for a single point.'''
        pcval = numpy.zeros((self.pcoord_ndim,), self.pcoord_dtype)
        if value is not None:
            pcval[:] = value
        return pcval
            
#    def new_trajectory(self, parent=None):
#        '''Return a new Segment object representing the first segment of a new trajectory,
#        with the given parent. If this method returns None (as is the default), then it is
#        up to the propagator to create a new trajectory.'''
#        return None
    