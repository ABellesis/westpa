2011-08-16 -- Matt Zwier <mczwier@gmail.com>
 * Restructured hooks and callbacks used during the simulation loop.
 * Removed calls to callbacks in ``systems.py``.
 * Added bin assignment, bin population, flux, and rate tracking code to the
   core SimManager loop.
 * Restructured HDF5 somewhat to store bin assignments, populations, fluxes,
   and rates in HDF5: added ``bin_assignments``, ``bin_populations``,
   ``bin_ntrans`` (number of transitions from i to j), ``bin_fluxes`` (flux
   from i to j), and ``bin_rates`` (rate from i to j) to each iteration's
   group; removed ``bin_counts``; renamed ``bin_probs`` to 
   ``bin_populations``.  Assignments and populations are per-timepoint, and
   transition counts, fluxes, and rates are per-iteration, evaluated by
   comparing the beginning and end of each iteration.
 * Added preliminary generic plug-in facilities to ``sim_manager.py``.
 * Added checks to ParticleCollection so that a populated bin cannot be set to
   zero weight and vice versa.
 * Binning has moved from WEDriver to SimManager.
 * Fixed bug in loading nested packages with ``extloader.py``.
 
2011-07-14 -- Matt Zwier <mczwier@gmail.com>
 * Fixed a very broken algorithm in w_ttimes for calculating fluxes and rates.
 * w_ttimes now stores intermediate results in an HDF5 file, both for speed
   and in anticipation of a more stepwise analysis framework.
 * Fixed a few regressions in w_steady_state.

2011-06-20 -- Matt Zwier <mczwier@gmail.com>
 * Fixed w_init so that it actually runs weighted ensemble correctly in order
   to populate initial bins.  The behavior now matches what is described in 
   the documentation for class ``InitialState``.
 * Integrated Dan's equilibrium reweighting code. This is activated by 
   specifying "do_equilibrium_reweighting = true" in ``wemd.cfg``. Code is
   contained in the newly-created ``wemdext`` package, which contains a 
   ``weed`` package with Dan's code.
 * Imposed a temporary restriction that binning cannot change between
   calls to w_run in order to support the equilibrium reweighting code.

2011-06-17 -- Matt Zwier <mczwier@gmail.com>
 * Fixed a largely broken w_init, rolling back a one-off change accidentally 
   placed in the development tree.
 * Added support for storage of generic segment-related data in HDF5 and
   initial support for storing coordinates and velocities.  The executable
   backend now accepts ``coord_return`` and ``velocity_return`` options
   in ``wemd.cfg`` mirroring ``pcoord_return``, and provides environment
   variables ``WEMD_COORD_RETURN`` and ``WEMD_VELOCITY_RETURN``.  Thanks to
   David Wang and Brandon Mills for help in this.

2011-06-10 -- Matt Zwier <mczwier@gmail.com>
 * Split "wemd init" and "wemd run" into w_init and w_run. The wemd script
   has been eliminated.
 * Added basic flux and rate calculations to w_ttimes
 * Removed brute-force analysis support from w_ttimes for clarity.  This
   functionality will be added back into separate a brute-force analysis tool.
 * Added ZeroMQ work manager. A master process coordinates work (and optionally
   spawns worker processes on the local machine). Worker processes respond to
   the master.  A third operational mode, "--node", is meant to coalesce
   communications between the master and multi-core nodes; the node process 
   communicates with the master through TCP/IP and with worker processes
   (which it spawns) over Unix sockets.  Speed within a node is almost
   identical to the Processes work manager, and so the zmq work manager will
   likely become the default soon. 
 * ZeroMQ-related development has probably broken the TCP/IP work manager,
   which will not be removed immediately (but soon).

2011-05-12 -- Joshua Adelman <joshua.adelman@gmail.com>
 * Initial implementation of VoronoiRegionSet

2011-05-12 -- Joshua Adelman <joshua.adelman@gmail.com>
 * Modified .hgignore to include .DS_Store files for developing on Mac OSX.
 * Modified w_steady_state to address Issue #3 in the main repo and added 
   additional functionality to provide users of w_steady_state command-line
   arguments to select the start/stop iteration for collecting statistics, an
   output option to write output to file, and a mode where the calculated bin
   probabilities are not pushed to storage, and an option to symmetrize the 
   count matrix. 
   
2011-04-27 -- Matt Zwier <mczwier@gmail.com>
 * Modified w_ttimes and wemdtools.trajectories.trajtree to support analyzing
   not only entire trajectories, but all trajectories alive at a specified
   start time.  The old behavior is available using the --whole-only command-
   line argument.  The number of segments to analyze is wrong for --whole-only,
   but was probably wrong all along.  TODO: count segments correctly for
   --whole-only.

2011-04-22 -- Matt Zwier <mczwier@gmail.com>
 * Added support for non-recycling simulations by not specifying any target
   states.
 * Provided WEMDSystem.initialize(), which must now be overridden instead
   of __init__() to implement a system class.  This separates the setup which
   *must* occur for all instances of WEMDSystem subclasses from the system-
   specific setup. The former occurs in WEMDSystem.__init__() which should
   not need to be overridden; the latter occurs in WEMDSystem.initialize(),
   which must be overridden. For a time, overriding WEMDSystem.__init__()
   will be supported, but will trigger DeprecationWarnings.
 * Outdated features of system files now trigger DeprecationWarnings.  Some
   especially critical warnings are logged using logging.warning() in
   addition to triggering a DeprecationWarning (just in case someone has
   circumvented the automatic display of DeprecationWarnings which occurs
   in any script called by the bin/wemd wrapper).

2011-04-20 -- Matt Zwier <mczwier@gmail.com>
 * Added an initial testing framework. Currently, only tests the ``pcoords``
   module, and requires nose to be installed to be used in any convenient way.
 * Optimized the various mapping routines in ``wemd.pcoords``.  5-d binning on
   a test data set of ~70,000 segments now takes about one second, compared to
   tens.
 * Made ``RegionSet.transform_coords`` actually work.  
 * Split wemd.pcoords.ParticleSet into a base class (ParticleCollection) and
   subclasses (ParticleSet and ParticleList) to support more generalized
   collections of particles.  This is probably not as useful as replacing
   the internal collection set for a RegionSet (see below).
 * Added the ``container_class`` keyword argument to the constructors for
   RectilinearRegionSet and PiecewiseRegionSet to allow for more general
   collections of binned objects.  This may ultimately be useless, but I
   wished for something like this while working with the w_binprobs script.
 * Renamed ``map_to_indices()`` to ``_map_to_indices()`` in RegionSet and
   subclasses, to formalize the fact that is it not intended to be a public
   entry point.
 * Added ``RegionSet.prep_coords()`` to ensure that assumptions used
   throughout pcoords.py are met (namely, that all lists of coordinates are
   2-d arrays) without sacrificing convenience (e.g. by making users promote
   vectors to 2-d arrays in transform_pcoord functions). This also uniformly
   applies a RegionSet's transform_pcoord where it is necessary (i.e. at any
   public entry point, such as ``map_to_bins()`` or ``get_bin_containing()``).
 * Renamed ``replace_region`` to ``replace_region_containing`` in RegionSet.
   ``replace_region`` continues to function, though it will cause a 
   DeprecationWarning. 
 * Enabled developer warnings by default for all programs executed through the
   ``bin/wemd`` wrapper script.
 * Moved the --profile global option from being WEMD's responsibility to being
   the responsibility of the ``bin/wemd`` wrapper script. As a result, any WEMD
   script invoked using the ``bin/wemd`` wrapper can now be profiled without
   changing any code. 

2011-04-15 -- Matt Zwier <mczwier@gmail.com>
 * Added w_segstats and w_succ scripts, reporting per-iteration statistics and
   listing successful trajectories, respectively.

2011-04-14 -- Matt Zwier <mczwier@gmail.com>
 * Modified w_avgbinprobs to calculate bin occupancies from segment progress 
   coordinates rather than read them from the bin_probs dataset stored for
   each iteration. This makes w_avgbinprobs work for simulations which change
   bin space during the run.
 * Added wemdtools.bins with functions for specifying region sets on the
   command line, within a Python file, or reading them from the system file.

2011-04-13 -- Matt Zwier <mczwier@gmail.com>
 * Fixed bug in CPU time accounting in executable backend. Namely, the cputime
   was derived from a getrusage() call in the parent process, which returned
   cumulative data for all running threads.  When combined with the threads or
   TCP/IP work manager, the CPU time was effectively being multiplied by the
   number of threads. Using wait4() instead of waitpid() to get child CPU
   times accurately.

2011-03-07 -- Matt Zwier <mczwier@gmail.com>
 * Updated TrajTree and w_ttimes to allow direct reading of pcoord data from
   the HDF5 file (formerly, only caching the pcoord data was allowed).  The
   performance hit is measurable, but not nearly as bad as it could be (for 
   the NaCl test data, less than 2-fold), probably due to OS-level caching.

2011-03-04 -- Matt Zwier <mczwier@gmail.com>
 * Updated trajectory tree walker for HDF5 storage. Relatively aggressive
   reads and caching were necessary to minimize HDF5 overhead.  Tests
   against prior data confirm the correctness of the tree walker.  
 * Added w_sqlite2hdf5 tool to convert old SQLite databases into the new HDF5
   format.  Most data is there, but user-supplied data (in the 'data' members
   of DB objects) and the target_hits column of the iteration summary table are
   not available.

2011-03-02 -- Matt Zwier <mczwier@gmail.com>
 * Added --ptol option to wemd init to allow for an initial probability
   distribution that doesn't sum *exactly* to one.
 * Renamed wemd.types to wemd.segment, since Segment is all that it contains
   and there are several standard and add-on packages with a "types" module.
 * Tripled bin assignment throughput by directly converting n-dimensional
   indices to flat indices without going through any list comprehensions
   or lookups.
 * Increased transition time analysis throughput between 3- and 6-fold
   by rewriting as much of the sequential processing as numpy vectorized
   operations as possible.  (3-fold improvement reflects tracking and
   writing all transitions and bin lifetimes; 6-fold improvement reflects
   tracking and reporting only event durations.)  Combined with the bin
   assignment speedup, transition time analysis throughput is increased
   9- to 17-fold. 

2011-02-28 -- Matt Zwier <mczwier@gmail.com>
 * Added w_avgbinprobs tool, which reports the average population of bins
   in a simulation along with Monte Carlo bootstrap error bars.  This is most
   suitable for use in determining simulation convergence, as no attempt is
   made to account for the global characteristics of the probability
   distribution (e.g. it may not even sum to unity).

2011-02-23 -- Matt Zwier <mczwier@gmail.com>
 * Yesterday's refactoring broke recycling reporting (though not recycling
   itself); this has been corrected.
 * Removed last reference to Particle and eliminated the class.

2011-02-22 -- Matt Zwier <mczwier@gmail.com>
 * Completely removed the use of the Particle class from the weighted ensemble
   routines, instead operating on Segment objects.  It's not actually much
   simpler, but it's easier to follow what's going on without having two
   different definitions of "parent" in the same simulation.
 * Fixed bugs in storing and retrieving parent_ids.
 * Added w_sanity command to check for inconsistencies in simulation data.
 * Restored tracebacks in verbose mode.
 * Modified wemd.rc.config_logging() to accept an optional second argument
   naming an additional logger to put into the output. A definite hack until
   I can actually figure out how to configure the logging module to my liking.
 * Added the ability to select a subset of segments to dump (with "-s") in 
   w_dumpsegs.

2011-02-21 -- Matt Zwier <mczwier@gmail.com>
 * Added p_parent_id output to w_ntop, to facilitate restarts when the initial
   state for a given segment is not known.

2011-02-15 -- Matt Zwier <mczwier@gmail.com>
 * Fixed bug in data manager where pcoords were not being written for any iteration
   except the first.  This manifested as broken (i.e. silently failing) restarts,
   because the progress coordinate data was otherwise handled completely
   within the sim manager.

2011-02-14 -- Matt Zwier <mczwier@gmail.com>
 * Added w_fluxanl tool to perform average flux-into-target analysis with
   Monte Carlo bootstrap estimates on the error of the mean. Subsumes the
   critical functionality of current_taudep.py (in wemdtools); omits the
   plotting features and alternate methods of calculating error bars.

2011-02-12 -- Matt Zwier <mczwier@gmail.com>
 * Formalized requirement that a work manager modifies Segment objects
   in-place WITHOUT changing the Python identity of members of the the list 
   submitted to WEMDWorkManager.propagate(segments). That is, if a remote
   worker returns a Segment object, that new object must be used to update
   the corresponding segment submitted by the sim manager, NOT replace it.
 * Process and TCP/IP work managers updated to reflect the above requirement;
   both work managers test clean with ODLD driver.
 * Eliminated Segment.update_propagation_data, as it is no longer necessary
   with the above formally required behavior. 
 * Simplified and clarified dispatch mechanism in processes work manager.
 * Added support for separate initial state and recycling (steady) state
   probabilities.  Tested with ODLD driver. This change requires modification
   of existing simulation system modules.
 * Modified wemd.systems.WEMDSystem to support reading initial states from a
   text file (WEMDSystem.read_initial_states()). Each line represents one 
   initial state, and must specify the label, the initial probability (the
   probability that a given replica starts in that state when the simulation is
   initialized), the recycling probability (the probability that a given 
   replica is recycled to that state), and the progress coordinate of that
   state. 
 * Replaced initial and target state tuples with systems.InitialState and
   systems.TargetState namedtuples. These should be accessed using field names,
   not indices, if at all possible; future development may require substitution
   of more general objects for namedtuples.
 * Added a "w_ntop" utility, which extracts the top N segments from each bin
   at a given simulation iteration. Optionally, w_ntop can output an initial
   states file (see above); thus, w_ntop can be used to populate a new
   simulation from an existing one.
 * General cleanup and clarification.

2011-02-11 -- Matt Zwier <mczwier@gmail.com>
 * Modified tcpip work manager to use the argparse module to parse command-line
   arguments. Besides providing a help message, this prevents bad options from
   crashing "wemd run" with cryptic errors.
 * Changed meaning of -k for tcpip work manager.  Now -k specifies a filename 
   from which to read the communications key. (So that on multi-user systems, 
   the key cannot be read from the process table or anything in /proc/<PID>/*.)
   This key file must not be world-readable and must be between 16 and 512 
   bytes in length (16 for at least a modicum of security, 512 so that 
   individual message data isn't mostly the key).
 * Added --debug-tcp option to tcpip work manager argument parser to switch
   TCP debugging code on and off without needing to comment/uncomment.
   Server vs. client specificity is obtained by specifying --debug-tcp only on
   server or client invocations, respectively.
 * Modified wemd_cmd.cmd_run exception handler to (attempt) to separate the
   original exception from any that arises during work_manager.shutdown(). 
   
2011-02-11 -- Matt Zwier <mczwier@gmail.com>
 * Time to start a CHANGELOG.
