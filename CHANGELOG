2011-04-15 -- Matt Zwier <mczwier@gmail.com>
 * Added w_segstats and w_succ scripts, reporting per-iteration statistics and
   listing successful trajectories, respectively.

2011-04-14 -- Matt Zwier <mczwier@gmail.com>
 * Modified w_avgbinprobs to calculate bin occupancies from segment progress 
   coordinates rather than read them from the bin_probs dataset stored for
   each iteration. This makes w_avgbinprobs work for simulations which change
   bin space during the run.
 * Added wemdtools.bins with functions for specifying region sets on the
   command line, within a Python file, or reading them from the system file.

2011-04-13 -- Matt Zwier <mczwier@gmail.com>
 * Fixed bug in CPU time accounting in executable backend. Namely, the cputime
   was derived from a getrusage() call in the parent process, which returned
   cumulative data for all running threads.  When combined with the threads or
   TCP/IP work manager, the CPU time was effectively being multiplied by the
   number of threads. Using wait4() instead of waitpid() to get child CPU
   times accurately.

2011-03-07 -- Matt Zwier <mczwier@gmail.com>
 * Updated TrajTree and w_ttimes to allow direct reading of pcoord data from
   the HDF5 file (formerly, only caching the pcoord data was allowed).  The
   performance hit is measurable, but not nearly as bad as it could be (for 
   the NaCl test data, less than 2-fold), probably due to OS-level caching.

2011-03-04 -- Matt Zwier <mczwier@gmail.com>
 * Updated trajectory tree walker for HDF5 storage. Relatively aggressive
   reads and caching were necessary to minimize HDF5 overhead.  Tests
   against prior data confirm the correctness of the tree walker.  
 * Added w_sqlite2hdf5 tool to convert old SQLite databases into the new HDF5
   format.  Most data is there, but user-supplied data (in the 'data' members
   of DB objects) and the target_hits column of the iteration summary table are
   not available.

2011-03-02 -- Matt Zwier <mczwier@gmail.com>
 * Added --ptol option to wemd init to allow for an initial probability
   distribution that doesn't sum *exactly* to one.
 * Renamed wemd.types to wemd.segment, since Segment is all that it contains
   and there are several standard and add-on packages with a "types" module.
 * Tripled bin assignment throughput by directly converting n-dimensional
   indices to flat indices without going through any list comprehensions
   or lookups.
 * Increased transition time analysis throughput between 3- and 6-fold
   by rewriting as much of the sequential processing as numpy vectorized
   operations as possible.  (3-fold improvement reflects tracking and
   writing all transitions and bin lifetimes; 6-fold improvement reflects
   tracking and reporting only event durations.)  Combined with the bin
   assignment speedup, transition time analysis throughput is increased
   9- to 17-fold. 

2011-02-28 -- Matt Zwier <mczwier@gmail.com>
 * Added w_avgbinprobs tool, which reports the average population of bins
   in a simulation along with Monte Carlo bootstrap error bars.  This is most
   suitable for use in determining simulation convergence, as no attempt is
   made to account for the global characteristics of the probability
   distribution (e.g. it may not even sum to unity).

2011-02-23 -- Matt Zwier <mczwier@gmail.com>
 * Yesterday's refactoring broke recycling reporting (though not recycling
   itself); this has been corrected.
 * Removed last reference to Particle and eliminated the class.

2011-02-22 -- Matt Zwier <mczwier@gmail.com>
 * Completely removed the use of the Particle class from the weighted ensemble
   routines, instead operating on Segment objects.  It's not actually much
   simpler, but it's easier to follow what's going on without having two
   different definitions of "parent" in the same simulation.
 * Fixed bugs in storing and retrieving parent_ids.
 * Added w_sanity command to check for inconsistencies in simulation data.
 * Restored tracebacks in verbose mode.
 * Modified wemd.rc.config_logging() to accept an optional second argument
   naming an additional logger to put into the output. A definite hack until
   I can actually figure out how to configure the logging module to my liking.
 * Added the ability to select a subset of segments to dump (with "-s") in 
   w_dumpsegs.

2011-02-21 -- Matt Zwier <mczwier@gmail.com>
 * Added p_parent_id output to w_ntop, to facilitate restarts when the initial
   state for a given segment is not known.

2011-02-15 -- Matt Zwier <mczwier@gmail.com>
 * Fixed bug in data manager where pcoords were not being written for any iteration
   except the first.  This manifested as broken (i.e. silently failing) restarts,
   because the progress coordinate data was otherwise handled completely
   within the sim manager.

2011-02-14 -- Matt Zwier <mczwier@gmail.com>
 * Added w_fluxanl tool to perform average flux-into-target analysis with
   Monte Carlo bootstrap estimates on the error of the mean. Subsumes the
   critical functionality of current_taudep.py (in wemdtools); omits the
   plotting features and alternate methods of calculating error bars.

2011-02-12 -- Matt Zwier <mczwier@gmail.com>
 * Formalized requirement that a work manager modifies Segment objects
   in-place WITHOUT changing the Python identity of members of the the list 
   submitted to WEMDWorkManager.propagate(segments). That is, if a remote
   worker returns a Segment object, that new object must be used to update
   the corresponding segment submitted by the sim manager, NOT replace it.
 * Process and TCP/IP work managers updated to reflect the above requirement;
   both work managers test clean with ODLD driver.
 * Eliminated Segment.update_propagation_data, as it is no longer necessary
   with the above formally required behavior. 
 * Simplified and clarified dispatch mechanism in processes work manager.
 * Added support for separate initial state and recycling (steady) state
   probabilities.  Tested with ODLD driver. This change requires modification
   of existing simulation system modules.
 * Modified wemd.systems.WEMDSystem to support reading initial states from a
   text file (WEMDSystem.read_initial_states()). Each line represents one 
   initial state, and must specify the label, the initial probability (the
   probability that a given replica starts in that state when the simulation is
   initialized), the recycling probability (the probability that a given 
   replica is recycled to that state), and the progress coordinate of that
   state. 
 * Replaced initial and target state tuples with systems.InitialState and
   systems.TargetState namedtuples. These should be accessed using field names,
   not indices, if at all possible; future development may require substitution
   of more general objects for namedtuples.
 * Added a "w_ntop" utility, which extracts the top N segments from each bin
   at a given simulation iteration. Optionally, w_ntop can output an initial
   states file (see above); thus, w_ntop can be used to populate a new
   simulation from an existing one.
 * General cleanup and clarification.

2011-02-11 -- Matt Zwier <mczwier@gmail.com>
 * Modified tcpip work manager to use the argparse module to parse command-line
   arguments. Besides providing a help message, this prevents bad options from
   crashing "wemd run" with cryptic errors.
 * Changed meaning of -k for tcpip work manager.  Now -k specifies a filename 
   from which to read the communications key. (So that on multi-user systems, 
   the key cannot be read from the process table or anything in /proc/<PID>/*.)
   This key file must not be world-readable and must be between 16 and 512 
   bytes in length (16 for at least a modicum of security, 512 so that 
   individual message data isn't mostly the key).
 * Added --debug-tcp option to tcpip work manager argument parser to switch
   TCP debugging code on and off without needing to comment/uncomment.
   Server vs. client specificity is obtained by specifying --debug-tcp only on
   server or client invocations, respectively.
 * Modified wemd_cmd.cmd_run exception handler to (attempt) to separate the
   original exception from any that arises during work_manager.shutdown(). 
   
2011-02-11 -- Matt Zwier <mczwier@gmail.com>
 * Time to start a CHANGELOG.
